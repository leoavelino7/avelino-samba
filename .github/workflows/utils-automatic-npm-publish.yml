name: Utils Automatic - Publish Package

on:
  push:
    paths:
      - "packages/utils-automatic/**"
      - "packages/tsconfig/**"
      - "packages/lint-config/**"
      - ".github/workflows/utils-automatic-build.yml"
      - "package.json"
    branches:
      - "main"
    tags-ignore:
      - "*"
      
env:
  NODE_VERSION: 18.x

jobs:
  install:
    name: "Step - Install Dependencies"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [$NODE_VERSION]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            packages/utils-automatic/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: yarn workspace avelino-samba-utils-automatic install --frozen-lockfile

  lint:
    name: "Step - Lint"

    runs-on: ubuntu-latest

    needs: [install]

    steps:
      - uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            packages/utils-automatic/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check linting
        run: yarn workspace avelino-samba-utils-automatic prettier:check

  test:
    name: "Step - Test"

    runs-on: ubuntu-latest

    needs: [install]

    steps:
      - uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            packages/utils-automatic/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check tests
        run: yarn workspace avelino-samba-utils-automatic test

  build:
    name: "Step - Build"

    runs-on: ubuntu-latest

    needs: [install]

    steps:
      - uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            packages/utils-automatic/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build
        run: yarn workspace avelino-samba-utils-automatic build

  publish:
    name: "Publish package"

    runs-on: ubuntu-latest

    needs: [build, test, lint]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org/

      - name: Get last published version
        id: last-published-version
        run: echo ::set-output name=version::$(npm show avelino-samba-utils-automatic version)
            
      - name: Check if version is the same
        id: version-same
        run: |
          echo "Current version: ${{ steps.last-published-version.outputs.version }}"
          echo "New version: $(node -p "require('./packages/utils-automatic/package.json').version")"
          if [ "${{ steps.last-published-version.outputs.version }}" == "$(node -p "require('./packages/utils-automatic/package.json').version")" ]; then
            echo "::set-output name=same::true"
          else
            echo "::set-output name=same::false"
          fi

      - name: Publish package
        if: ${{ steps.last-published-version.outputs.same != 'true' }}
        run: |
          cd packages/utils-automatic
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
          npm publish --access public --tag latest --userconfig ./.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
